# apiVersion: argoproj.io/v1alpha1
# kind: AnalysisTemplate
# metadata:
#   name: success-rate
# spec:
#   args:
#   - name: api-service-canary
#   metrics:
#   - name: success-rate
#     interval: 5m
#     # NOTE: prometheus queries return results in the form of a vector.
#     # So it is common to access the index 0 of the returned array to obtain the value
#     successCondition: result[0] >= 0.95
#     failureLimit: 3
#     provider:
#       nginx:
#         address: http://prometheus.example.com:9090
#         query: |
#           sum(irate(
#             istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}",response_code!~"5.*"}[5m]
#           )) /
#           sum(irate(
#             istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}"}[5m]
#           ))
# ---
# # This AnalysisTemplate will run a Kubernetes Job every 5 seconds, with a 50% chance of failure.
# # When the number of accumulated failures exceeds failureLimit, it will cause the analysis run to
# # fail, and subsequently cause the rollout or experiment to abort.
# kind: AnalysisTemplate
# apiVersion: argoproj.io/v1alpha1
# metadata:
#   name: random-fail
# spec:
#   metrics:
#   - name: random-fail
#     count: 2
#     interval: 5s
#     failureLimit: 1
#     provider:
#       job:
#         spec:
#           template:
#             spec:
#               containers:
#               - name: sleep
#                 image: alpine:3.8
#                 command: [sh, -c]
#                 args: [FLIP=$(($(($RANDOM%10))%2)) && exit $FLIP]
#               restartPolicy: Never
#           backoffLimit: 0

kind: AnalysisTemplate
apiVersion: argoproj.io/v1alpha1
metadata:
  name: always-pass
spec:
  metrics:
  - name: pass
    interval: 5s
    failureLimit: 1
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: sleep
                image: alpine:3.8
                command: [sh, -c]
                args: [exit 0]
              restartPolicy: Never
          backoffLimit: 0
    count: 1
